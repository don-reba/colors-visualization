// REFERENCE: System.Drawing.dll
// REFERENCE: ConvertColor.dll
// PLATFORM: x64

#define TRACE

using ConvertColor;

using Nemerle.Collections;
using System.Collections.Generic;
using System.Console;
using System.Drawing;
using System.Diagnostics;
using System.Globalization;
using System.Math;
using System.IO;
using System.Threading;

[ Record ]
class Domain
{
	public X : double * double;
	public Y : double * double;
	public Z : double * double;
}

def LoadPoints(path)
{
	using (reader = BinaryReader(File.OpenRead(path)))
	{
		WriteLine("reading data...");
		def points = array(reader.ReadInt32());
		for (mutable i; i != points.Length; ++i)
		{
			points[i] =
				( reader.ReadDouble()
				, reader.ReadDouble()
				, reader.ReadDouble()
				);
		}
		WriteLine("{0:N0} points", points.Length);
		points;
	}
}

def RgbToLab(points, domain)
{
	def CheckRange(x, (min, max))
	{
		when (x < min || x > max)
			throw System.ArgumentOutOfRangeException("Point not in voxel volume.");
	}
	def MapPoint(r, g, b)
	{
		def (x, y, z) = (r / 255.0, g / 255.0, b / 255.0) |> RgbToXyz |> XyzToLab;
		CheckRange(x, domain.X);
		CheckRange(y, domain.Y);
		CheckRange(z, domain.Z);
		(x, y, z);
	}
	points.Map(MapPoint);
}

def Voxelize(points, domain, σ, cellSize, n)
{
	def CreateThreads(dataCount, threadCount, f)
	{
		def threads = array(threadCount);
		mutable prev = 0;
		for (mutable i = 0; i != threadCount; ++i)
		{
			def fi    = i;
			def begin = prev;
			def end   = dataCount * (i + 1) / threadCount;
			threads[i] = Thread(() => f(fi, begin, end));
			prev = end;
		}
		threads;
	}
	def N(min, max)
	{
		Ceiling((max - min) / cellSize) :> int;
	}

	def (nx, ny, nz) = (N(domain.X), N(domain.Y), N(domain.Z));
	def grid : array[double] = array(nx * ny * nz);

	def scale = -0.5 / σ / σ;
	def n = Ceiling(n * σ) :> int;

	def VoxelizeRange(threadID, start, finish)
	{
		def subrid : array[double] = array(grid.Length);

		def watch = Stopwatch.StartNew();

		for (mutable i = start, i != finish; ++i)
		{
			when (i % 10 == 0 && watch.ElapsedMilliseconds >= 60_000)
			{
				def done    = i - start;
				def outOf   = finish - start;
				def percent = done * 100.0 / outOf;
				WriteLine("thread {0} at {1} / {2} ({3:F1}%)", threadID, done, outOf, percent);
				watch.Restart();
			}

			def (xs, ys, zs) = points[i];
			def xs = xs - domain.X[0];
			def ys = ys - domain.Y[0];
			def zs = zs - domain.Z[0];

			def cx = (xs / cellSize + 0.5) :> int;
			def cy = (ys / cellSize + 0.5) :> int;
			def cz = (zs / cellSize + 0.5) :> int;

			def (minX, maxX) = (Max(0, cx - n), Min(cx + n, nx - 1));
			def (minY, maxY) = (Max(0, cy - n), Min(cy + n, ny - 1));
			def (minZ, maxZ) = (Max(0, cz - n), Min(cz + n, nz - 1));

			for (mutable z = minZ; z <= maxZ; ++z)
			for (mutable y = minY; y <= maxY; ++y)
			for (mutable x = minX; x <= maxX; ++x)
			{
				def δx = xs - cellSize * (x + 0.5);
				def δy = ys - cellSize * (y + 0.5);
				def δz = zs - cellSize * (z + 0.5);

				subrid[(z * ny + y) * nx + x] += Exp(scale * (δx * δx + δy * δy + δz * δz));
			}
		}
		lock (grid)
		{
			for (mutable i; i != grid.Length; ++i)
				grid[i] += subrid[i];
		}
	}

	WriteLine("voxelizing over a {0}x{1}x{2} grid...", nx, ny, nz);

	def threads = CreateThreads(points.Length, 3, VoxelizeRange);
	foreach (t in threads)
		t.Start();
	foreach (t in threads)
		t.Join();

	for (mutable i; i != grid.Length; ++i)
		grid[i] *= Pow(σ * Sqrt(2.0 * PI), -3.0);

	(grid, (nx, ny, nz))
}

def AnalyzeVolume((grid : array[double], _), cellSize)
{
	WriteLine
		( "mean: {0:F2}; max: {1:F2}; sum: {2:N0}"
		, grid.Fold(0.0, _ + _) / grid.Length
		, grid.Fold(0.0, Max)
		, grid.Fold(0.0, _ + _) * Pow(cellSize, 3.0)
		);
}

def SaveVolume(path, (grid, (nx, ny, nz)), domain, cellSize)
{
	WriteLine("Saving...");
	using (w = BinaryWriter(File.Create(path)))
	{
		w.Write(cellSize    :> float);
		w.Write(nx          :  int);
		w.Write(ny          :  int);
		w.Write(nz          :  int);
		w.Write(domain.X[0] :> float);
		w.Write(domain.Y[0] :> float);
		w.Write(domain.Z[0] :> float);
		for (mutable i = 0; i != grid.Length; ++i)
			w.Write(grid[i] :> float);
	}
}

def cellSize = 1.0;
def σ        = 3.0;
def n        = 4.0;

def rootDir = @"..\madoka\gymnopedie";

_ = Directory.CreateDirectory(Path.Combine(rootDir, "voxels"));

foreach (iPath in Directory.GetFiles(Path.Combine(rootDir, "samples"), "*"))
{
	def oPath = Path.Combine(rootDir, "voxels", Path.ChangeExtension(Path.GetFileName(iPath), "dat"));

	def domain = Domain(RangeL, RangeA, RangeB);

	def watch = Stopwatch.StartNew();

	def points = RgbToLab(LoadPoints(iPath), domain);
	def volume = Voxelize(points, domain, σ, cellSize, n);
	AnalyzeVolume(volume, cellSize);
	SaveVolume(oPath, volume, domain, cellSize);

	WriteLine("{0} seconds", watch.Elapsed.TotalSeconds);
}
