// REFERENCE: System.Drawing.dll
// PLATFORM: x86

#define TRACE

using Nemerle.Collections;
using System.Collections.Generic;
using System.Console;
using System.Diagnostics;
using System.IO;
using System.Math;
using System;


def Load(path)
{
	using (txt = File.OpenText(path))
	{
		WriteLine("Reading data...");
		def watch = Stopwatch.StartNew();

		// skip header
		def header = txt.ReadLine();
		Trace.Assert(header == "index\trank\thex\tvotes\tcomments\thearts\tdate\tname", "header");

		mutable n = 0;

		def entries = List();
		for (mutable line = txt.ReadLine(); line != null; line = txt.ReadLine())
		{
			def parts = line.Split(array['\t']);
			def color = Drawing.Color.FromArgb(int.Parse(parts[2], Globalization.NumberStyles.HexNumber));
			def votes = int.Parse(parts[3]);

			when (votes > 0)
				entries.Add(color, votes);

			++n;
		}

		WriteLine
			( "Loaded {0:N0} entries ({1:N0} non-zero) in {2:N0} seconds"
			, n, entries.Count, watch.Elapsed.TotalSeconds
			);

		entries.ToArray();
	}
}

// people can only vote on 256 gradations of each channel
// jittering votes by Â±0.5 smoothes out the distribution
def Jitter(entries)
{
	def samples = List();
	samples.Capacity = entries.Fold(0, ((_, votes), sum) => sum + votes);

	def random = Random(0);

	def Offset(x : int)
	{
	| 0   => 0     + random.NextDouble() * 0.5
	| 255 => 255.0 - random.NextDouble() * 0.5
	| x   => x     + random.NextDouble()
	}

	foreach ((color, votes) in entries)
	{
		repeat (votes)
		{
			samples.Add
				( Offset(color.R)
				, Offset(color.G)
				, Offset(color.B)
				);
		}
	}

	samples.ToArray();
}

def SaveBin(path, samples)
{
	using (w = BinaryWriter(File.Create(path)))
	{
		w.Write(samples.Length : int);
		foreach ((r, g, b) in samples)
		{
			w.Write(r : double);
			w.Write(g : double);
			w.Write(b : double);
		}
	}
	WriteLine("'{0}'", path);
}

def SaveTxt(path, samples)
{
	using (w = File.CreateText(path))
	{
		foreach ((r, g, b) in samples)
			w.WriteLine("{0}\t{1}\t{2}", r, g, b);
	}
	WriteLine("'{0}'", path);
}

def samples = Jitter(Load(@"..\get colors\data.txt"));

WriteLine("Saving {0:N0} samples...", samples.Length);

SaveBin("samples.dat", samples);
SaveTxt("samples.txt", samples);
