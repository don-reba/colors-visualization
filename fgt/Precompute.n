// REFERENCE: ConvertColor.dll
// REFERENCE: FGT.dll
// PLATFORM: x86

using ConvertColor;
using FGT;
using Nemerle.Collections;
using System.Collections.Generic;
using System.Console;
using System.Diagnostics;
using System.IO;
using System.Math;
using System;

def PadToMultiple(coef1, (nx1, ny1, nz1), pd, k)
{
	def RoundUp(n, k)
	{
		if (n % k == 0)
			n
		else
			n / k * k + k
	}

	WriteLine("Padding...");

	def nx2 = RoundUp(nx1, k);
	def ny2 = RoundUp(ny1, k);
	def nz2 = RoundUp(nz1, k);

	if (nx1 == nx2 && ny1 == ny2 && nz1 == nz2)
		(coef1, (nx1, ny1, nz1))
	else
	{
		def coef2 : array[double] = array(nx2 * ny2 * nz2 * pd);
		for (mutable z; z != nz1; ++z)
		for (mutable y; y != ny1; ++y)
			Array.Copy
				( sourceArray      = coef1
				, sourceIndex      = nx1 * pd * (z * ny1 + y)
				, destinationArray = coef2
				, destinationIndex = nx2 * pd * (z * ny2 + y)
				, length           = nx1 * pd
				);
		(coef2, (nx2, ny2, nz2))
	}
}

def Load(path, domain)
{
	using (reader = BinaryReader(File.OpenRead(path)))
	{
		WriteLine("Reading data...");
		def watch = Stopwatch.StartNew();

		def count = reader.ReadInt32();

		def entries = List();
		entries.Capacity = count;
		repeat (count)
		{
			def r = reader.ReadDouble() / 255.0;
			def g = reader.ReadDouble() / 255.0;
			def b = reader.ReadDouble() / 255.0;

			def p = (r, g, b) |> RgbToXyz |> XyzToLab;
			Trace.Assert(p[0] >= domain.x[0] && p[0] <= domain.x[1]);
			Trace.Assert(p[1] >= domain.y[0] && p[1] <= domain.y[1]);
			Trace.Assert(p[2] >= domain.z[0] && p[2] <= domain.z[1]);

			entries.Add(Value3D(p, 1.0));
		}
		WriteLine("Loaded {0:N0} entries {1:N0} seconds", entries.Count, watch.Elapsed.TotalSeconds);
		entries.ToArray();
	}
}

def Save(path, a)
{
	def mem = sizeof(double) * a.n[0] * a.n[1] * a.n[2] * a.pd;
	WriteLine("Saving {0}x{1}x{2}x{3} ({4:N0} bytes)...", a.n[0], a.n[1], a.n[2], a.pd, mem);

	def (coef, n) = PadToMultiple(a.coef, a.n, a.pd, 2);

	using (w = BinaryWriter(File.Create(path)))
	{
		w.Write(a.σ           :> float);
		w.Write(a.α           : int);
		w.Write(a.pd          : int);
		w.Write(a.side        :> float);
		w.Write(n[0]          : int);
		w.Write(n[1]          : int);
		w.Write(n[2]          : int);
		w.Write(a.domain.x[0] :> float);
		w.Write(a.domain.y[0] :> float);
		w.Write(a.domain.z[0] :> float);
		w.Write(coef.Length : int);
		for (mutable i; i != coef.Length; ++i)
			w.Write(coef[i] :> float);
	}

	WriteLine("'{0}'", path);
}

def Pad(min, max, σ, r, n)
{
	def offset = n * σ / r;
	(min - offset, max + offset);
}

def iPath = @"..\get samples\samples.dat";
def oPath = "coef s3 a6 2.0.dat";
def σ     = 3.0 * Sqrt(2.0); // Sqrt(2) to make a proper Gaussian kernel
def α     = 6;
def r     = 2.0;

def domain = Domain3D
	( Pad(   0.0, 100.0, σ, r, 8)
	, Pad( -87.0,  99.0, σ, r, 8)
	, Pad(-108.0,  96.0, σ, r, 8)
	);

// TODO: save enough information to easily restore Approximation3D
Save(oPath, Preprocess(Load(iPath, domain), σ, α, r, domain));
